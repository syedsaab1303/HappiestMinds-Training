
Question:- what is Java Architecture ?
Answer:-
-> Java Architecture is a collection of components, i.e., JVM, JRE, and JDK. 
-> It integrates the process of interpretation and compilation. 
-> It defines all the processes involved in creating a Java program. 

Java Architecture can be explained by using the following steps:

1) There is a process of compilation and interpretation in Java.
2) Java compiler converts the Java code into byte code.
3) After that, the JVM converts the byte code into machine code.
4) The machine code is then executed by the machine.


Question:-  Components of Java Architecture ?
Answer:-
The Java architecture includes the three main components:

1) Java Development Kit (JDK)
2) Java Runtime Environment (JRE)
3) Java Virtual Machine (JVM)


1) Java Development Kit (JDK)
-> Java Developer Kit contains tools needed to develop the Java programs, and JRE to run the programs.
-> The tools include compiler (javac.exe), Java application launcher (java.exe), etc
-> JDK is mainly targeted for java development. i.e. You can create a Java file , compile a Java file and run a java file.
-> JDK=JRE + Development Tools
				
2) Java Runtime Environment (JRE)
-> Java Runtime Environment contains JVM, Runtime libraries, and other supporting files.
-> It does not contain any development tools such as compiler, debugger, etc.
-> Actually JVM runs the program, and it uses the class libraries, and other supporting files provided in JRE.
-> If you want to run any java program, you need to have JRE installed in the system

-> JRE = JVM + Java Package Classes + Runtime Libraries			
				

3) Java Virtual Machine (JVM)	
-> JVM is an abstract machine.
-> It is a Runtime Engine responsible to run java based applications.
-> It is a specification that provides runtime environment in which java bytecode can be executed.
-> JVM is platform dependent because configuration of each OS differs and this makes java Platform Independent.

JVM performs following main tasks:
- load .class file
- Verifies code
- execute .class file
- Provides runtime environment Libraries		
	

Basic Architecture of JVM is:	
			
A) Class Loader: It is responsible for the following three tasks:
               1) Loading
	       2) Linking
	       3) Initialisation
			   
1) Loading
-> It will read .class file and store corressponding information in the method area. 
-> For each class file, JVM will store following information in the method area:

- Fully qualified class name.
- Fully qualified parent class name.
- Methods information.
- Variables information.
- Constructors information.
- Modifiers information.
- Constant pool information. etc...

Three types of class loaders:

1. Bootstrap Class Loader : Responsible to load the classes present in rt.jar

2. Extention Class Loader: Responsible to load the classes from extention class path.

3. Application Class Loader : Responsible to load the classes from application classpath.
                              It internally uses environment variable class path.


2) Linking:- In linking three activities are performed

1. Verification 
2. Preparation
3. Resolution

• Verification: - In this process Byte Code Verifer checks wether the .class file is generated by valid compiler or not and whether .class file is properly 
                  formated or not.
                - If verification fails, then JVM will provide "java.lang.VerifyError" exception.
                - Because of this process, java is secured.

• Preparation: In this process JVM will allocate memory for class level static variables & assign default values.

• Resolution: In this process symbolic names present in our program are replaced with original memory references from method area. for eg '@' its ASCII value is 64 in
              decimal


3) Initialisation: In this process, two activities will be performed:-

1. All static variables are assigned with original values.
2. static blocks will be executed from top to bottom



B) Memory Areas:- Total 5 types of Memory Areas

1. Method Area
2. Heap Area 
3. Stack Area
4. PC Register 
5. Native Method Area

1). Method Area:
- Method area is created when JVM is started.
- It stores .class file information and static variables.
- Per JVM one memory area, therefore multiple threads can access this area, so it is not thread safe.


2). Heap Area :
- Heap area is created when JVM is started.
- It stores objects, instance variables and arrays (as every arrays is an object in java).
- It can be accessed by multiple threads, so the data stored in heap area is not thread safe.


3). Stack Area:
- Whenever a new thread is created, a separate stack area will also be created.
- It stores the current running method and local variables.
- When the method is completed, the corresponding entry from the stack will be removed.
- After completing all method calls, the stack will become empty and that empty stack will be destroyed by thee JVM just before terminating the thread.
- The data stored in the stack is available only for the corresponding thread and not available to the remaining thread, so this area is thread safe.


4). PC Register:
- It holds the address of next executing instruction.
- For every thread, a separate pc register is created, so it is also a thread safe.


5). Native Method Stacks:
- It contains the information of all the native methods used in our application.
- For every thread separate native method stack will be created.
- It is also thread safe.



C) Execution Engine:- Execution Engine is responsible to execute java class file.

It contains mainly two components:
1. Interpreter 2. JIT Compiler

a) Interpreter:-
-  It converts the byte code into native code and executes.
-  It sequentially executes the code.
-  The interpreter interprets continuously and even the same method multiple times.
-  This reduces the performance of the system, and to solve this, the JIT compiler is introduced.

byte code -> interpret -> machine code or native code -> execute 


b) JIT Compiler:-
-  JIT stands for Just-in-Time which means that code gets compiled when it is needed, not before runtime.
-  JIT compiler is introduced to remove the drawback of the interpreter.
-  It increases the speed of execution and improves performance.
-  JIT compilation is applicable only for repeatedly required methods, not for every method.



D) Java Native Interface (JNI)

- An interface that allows Java to interact with code written in another language.
- It acts as mediator for java method calls & the corresponding native libraries i.e. JNI is responsible to provide information about native libraries to the JVM.
- Native Method Library provides or holds native library information.
- The java command-line utility is an example of one such application.








