// MySQL

- MySQL is a relational database management system based on the Structured Query Language, which is the popular language for accessing and managing the records
   in the database.
- MySQL is open-source and free software

Note:- SQL keywords are NOT case sensitive: select is the same as SELECT

// Database
- A database is an application that stores the organized collection of records. It can be accessed and manage by the user very easily.


// MySQL Features

1) Easy to use
2) Free to download
3) It is scalable
4) Platform Independent
5) Allows roll-back
6) Compatible on many operating systems


// What is RDBMS?
- RDBMS stands for Relational Database Management System.
- RDBMS is a program used to maintain a relational database.

// What is a Database Table?
- A table is a collection of related data entries, and it consists of columns and rows.
- A column holds specific information about every record in the table.
- A record (or row) is each individual entry that exists in a table


// Some of The Most Important SQL Commands

SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index


// The MySQL Statements

// SELECT Syntax

- SELECT column1, column2, ... FROM table_name;

- SELECT * FROM table_name;

// SELECT DISTINCT Statement
- The SELECT DISTINCT statement is used to return only distinct (different) values.

// SELECT DISTINCT Syntax

SELECT DISTINCT column1, column2, ... FROM table_name;



// The MySQL WHERE Clause
- It is used to extract only those records that fulfill a specified condition.

// WHERE Syntax

SELECT column1, column2, ...
FROM table_name
WHERE condition;

- Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!

NOTES:- SQL requires single quotes around text values (most database systems will also allow double quotes). However, numeric fields should not be enclosed in quotes:

// Operators in The WHERE Clause

      Operator	              Description	
	=			Equal	
	>			Greater than	
	<			Less than	
	>=			Greater than or equal	
	<=			Less than or equal	
	<>			Not equal. Note: In some versions of SQL this operator may be written as !=	
	BETWEEN	        	Between a certain range	 (both inclusive)
	LIKE		        Search for a pattern	
	IN			To specify multiple possible values for a column


// MySQL AND, OR and NOT Operators

- The WHERE clause can be combined with AND, OR, and NOT operators.

- The AND and OR operators are used to filter records based on more than one condition:

1) The AND operator displays a record if all the conditions separated by AND are TRUE.
2) The OR operator displays a record if any of the conditions separated by OR is TRUE.
3) The NOT operator displays a record if the condition(s) is NOT TRUE.

// AND Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

// OR Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

// NOT Syntax
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

NOTE:- You can also combine the AND, OR and NOT operators.


// MySQL ORDER BY Keyword
- The ORDER BY keyword is used to sort the result-set in ascending or descending order.
- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

// ORDER BY Syntax

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;


// MySQL INSERT INTO Statement
- The INSERT INTO statement is used to insert new records in a table.

// INSERT INTO Syntax
- It is possible to write the INSERT INTO statement in two ways:

1. Specify both the column names and the values to be inserted:

INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order
    of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

INSERT INTO table_name
VALUES (value1, value2, value3, ...);


// MySQL NULL Values
- A field(column) with a NULL value is a field with no value.
- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be
   saved with a NULL value.

Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation.

// How to Test for NULL Values?
- It is not possible to test for NULL values with comparison operators, such as =, <, or <>.

- We will have to use the IS NULL and IS NOT NULL operators instead.
- The IS NULL operator is used to test for empty values (NULL values).
- The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).


// IS NULL Syntax

SELECT column_names
FROM table_name
WHERE column_name IS NULL;

// IS NOT NULL Syntax

SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;


// MySQL UPDATE Statement
- The UPDATE statement is used to modify the existing records in a table.

// UPDATE Syntax

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should 
      be updated. If you omit the WHERE clause, all records in the table will be updated!


// MySQL DELETE Statement
- The DELETE statement is used to delete existing records in a table.

// DELETE Syntax
DELETE FROM table_name WHERE condition;

Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted.
     If you omit the WHERE clause, all records in the table will be deleted!


// Delete All Records
- It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

// syntax
DELETE FROM table_name;


// MySQL LIMIT Clause
- The LIMIT clause is used to specify the number of records to return.
- The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

// LIMIT Syntax

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;


// MySQL MIN() and MAX() Functions
- The MIN() function returns the smallest value of the selected column.
- The MAX() function returns the largest value of the selected column.

// MIN() Syntax

SELECT MIN(column_name)
FROM table_name
WHERE condition;

// MAX() Syntax

SELECT MAX(column_name)
FROM table_name
WHERE condition;


// MySQL COUNT(), AVG() and SUM() Functions
- The COUNT() function returns the number of rows that matches a specified criterion.

// COUNT() Syntax
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

- The AVG() function returns the average value of a numeric column. 

// AVG() Syntax
SELECT AVG(column_name)
FROM table_name
WHERE condition;

- The SUM() function returns the total sum of a numeric column. 

// SUM() Syntax
SELECT SUM(column_name)
FROM table_name
WHERE condition;

Note: NULL values are not counted and ignored in sum and average case.


// MySQL LIKE Operator
- The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

- There are two wildcards often used in conjunction with the LIKE operator:

1) The percent sign (%) represents zero, one, or multiple characters
2) The underscore sign (_) represents one, single character
3) The percent sign and the underscore can also be used in combinations!

// LIKE Syntax
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

Tip: You can also combine any number of conditions using AND or OR operators.


// LIKE Operator							Description

WHERE CustomerName LIKE 'a%'   :-	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'   :-	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%' :-	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'  :-	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'  :-	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%' :-	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'   :-	Finds any values that start with "a" and ends with "o"


Q-:   Select all records where the value of the City column contains the letter "a".
Ans-: SELECT * FROM Customers where city like '%a%';

Q-:   Select all records where the value of the City column does NOT start with the letter "a".
And:- SELECT * FROM Customers where city not like 'a%';


// MySQL IN Operator
- The IN operator allows you to specify multiple values in a WHERE clause.
- The IN operator is a shorthand for multiple OR conditions.

// IN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);
or:

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

NOTE:- We use NOT IN also.

Q-: Use the IN operator to select all the records where Country is NOT "Norway" and NOT "France".

SELECT * FROM Customers where country not in ('Norway', 'France');


// MySQL BETWEEN Operator
- The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
- The BETWEEN operator is inclusive: begin and end values are included.

// BETWEEN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

NOTE:- 1) To display the products outside the range use NOT BETWEEN:
	   2) We use BETWEEN/NOT BETWEEN with IN/NOT IN.



// MySQL Aliases
- Aliases are used to give a table, or a column in a table, a temporary name.
- Aliases are often used to make column names more readable.
- An alias only exists for the duration of that query.
- An alias is created with the AS keyword.

// Alias Column Syntax
SELECT column_name AS alias_name
FROM table_name;

// Alias Table Syntax
SELECT column_name(s)
FROM table_name AS alias_name;























